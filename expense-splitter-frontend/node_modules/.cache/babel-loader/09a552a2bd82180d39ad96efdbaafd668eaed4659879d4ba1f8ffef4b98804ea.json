{"ast":null,"code":"// src/features/expenses/expenseSlice.js\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/v1/';\nconst initialState = {\n  expenses: [],\n  balances: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\nconst getToken = thunkAPI => thunkAPI.getState().auth.token;\n\n// Get expenses for a group\nexport const getExpensesForGroup = createAsyncThunk('expenses/getForGroup', async (groupId, thunkAPI) => {\n  try {\n    const token = getToken(thunkAPI);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.get(`${API_URL}groups/${groupId}/expenses`, config);\n    return response.data.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get balances for a group\nexport const getGroupBalances = createAsyncThunk('expenses/getBalances', async (groupId, thunkAPI) => {\n  try {\n    const token = getToken(thunkAPI);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.get(`${API_URL}groups/${groupId}/balances`, config);\n    return response.data.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Add new expense\nexport const addExpense = createAsyncThunk('expenses/add', async (expenseData, thunkAPI) => {\n  try {\n    const token = getToken(thunkAPI);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.post(API_URL + 'expenses', expenseData, config);\n    // After adding, dispatch actions to refresh both expenses and balances\n    thunkAPI.dispatch(getExpensesForGroup(expenseData.group));\n    thunkAPI.dispatch(getGroupBalances(expenseData.group));\n    return response.data.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const expenseSlice = createSlice({\n  name: 'expense',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(getExpensesForGroup.pending, state => {\n      state.isLoading = true;\n    }).addCase(getExpensesForGroup.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.expenses = action.payload;\n    }).addCase(getExpensesForGroup.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getGroupBalances.pending, state => {/* No loading change to avoid flicker */}).addCase(getGroupBalances.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.balances = action.payload;\n    }).addCase(getGroupBalances.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(addExpense.pending, state => {\n      state.isLoading = true;\n    }).addCase(addExpense.fulfilled, (state, action) => {\n      // We don't need to manually update state here because the dispatches above will trigger a refresh\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(addExpense.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = expenseSlice.actions;\nexport default expenseSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","initialState","expenses","balances","isError","isSuccess","isLoading","message","getToken","thunkAPI","getState","auth","token","getExpensesForGroup","groupId","config","headers","Authorization","response","get","data","error","_error$response","_error$response$data","toString","rejectWithValue","getGroupBalances","_error$response2","_error$response2$data","addExpense","expenseData","post","dispatch","group","_error$response3","_error$response3$data","expenseSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/Users/srisa/OneDrive/Desktop/SplitIQ/expense-splitter-frontend/src/features/expenses/expenseSlice.js"],"sourcesContent":["// src/features/expenses/expenseSlice.js\r\n\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/v1/';\r\n\r\nconst initialState = {\r\n  expenses: [],\r\n  balances: [],\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n};\r\n\r\nconst getToken = (thunkAPI) => thunkAPI.getState().auth.token;\r\n\r\n// Get expenses for a group\r\nexport const getExpensesForGroup = createAsyncThunk('expenses/getForGroup', async (groupId, thunkAPI) => {\r\n  try {\r\n    const token = getToken(thunkAPI);\r\n    const config = { headers: { Authorization: `Bearer ${token}` } };\r\n    const response = await axios.get(`${API_URL}groups/${groupId}/expenses`, config);\r\n    return response.data.data;\r\n  } catch (error) {\r\n    const message = (error.response?.data?.error) || error.message || error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n  }\r\n});\r\n\r\n// Get balances for a group\r\nexport const getGroupBalances = createAsyncThunk('expenses/getBalances', async (groupId, thunkAPI) => {\r\n    try {\r\n      const token = getToken(thunkAPI);\r\n      const config = { headers: { Authorization: `Bearer ${token}` } };\r\n      const response = await axios.get(`${API_URL}groups/${groupId}/balances`, config);\r\n      return response.data.data;\r\n    } catch (error)      {\r\n      const message = (error.response?.data?.error) || error.message || error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  });\r\n\r\n// Add new expense\r\nexport const addExpense = createAsyncThunk('expenses/add', async (expenseData, thunkAPI) => {\r\n    try {\r\n        const token = getToken(thunkAPI);\r\n        const config = { headers: { Authorization: `Bearer ${token}` } };\r\n        const response = await axios.post(API_URL + 'expenses', expenseData, config);\r\n        // After adding, dispatch actions to refresh both expenses and balances\r\n        thunkAPI.dispatch(getExpensesForGroup(expenseData.group));\r\n        thunkAPI.dispatch(getGroupBalances(expenseData.group));\r\n        return response.data.data;\r\n    } catch (error) {\r\n        const message = (error.response?.data?.error) || error.message || error.toString();\r\n        return thunkAPI.rejectWithValue(message);\r\n    }\r\n});\r\n\r\n\r\nexport const expenseSlice = createSlice({\r\n  name: 'expense',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getExpensesForGroup.pending, (state) => { state.isLoading = true; })\r\n      .addCase(getExpensesForGroup.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.expenses = action.payload;\r\n      })\r\n      .addCase(getExpensesForGroup.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(getGroupBalances.pending, (state) => { /* No loading change to avoid flicker */ })\r\n      .addCase(getGroupBalances.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.balances = action.payload;\r\n      })\r\n      .addCase(getGroupBalances.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(addExpense.pending, (state) => { state.isLoading = true; })\r\n      .addCase(addExpense.fulfilled, (state, action) => {\r\n        // We don't need to manually update state here because the dispatches above will trigger a refresh\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n      })\r\n      .addCase(addExpense.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = expenseSlice.actions;\r\nexport default expenseSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}