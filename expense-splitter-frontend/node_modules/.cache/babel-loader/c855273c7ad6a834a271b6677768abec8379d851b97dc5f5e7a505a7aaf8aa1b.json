{"ast":null,"code":"// src/features/groups/groupSlice.js\n\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/v1/groups/';\nconst initialState = {\n  groups: [],\n  singleGroup: null,\n  // Add state for a single group's details\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n};\n\n// Helper function to get the token\nconst getToken = thunkAPI => thunkAPI.getState().auth.token;\n\n// Get all user groups\nexport const getGroups = createAsyncThunk('groups/getAll', async (_, thunkAPI) => {\n  try {\n    const token = getToken(thunkAPI);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.get(API_URL, config);\n    return response.data.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Get a single group by ID\nexport const getGroupById = createAsyncThunk('groups/getById', async (groupId, thunkAPI) => {\n  try {\n    const token = getToken(thunkAPI);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    // Note: We don't have a backend route for this yet, let's assume one exists at /api/v1/groups/:id\n    // We will need to add this to the backend. For now, we can filter from the existing groups list as a fallback.\n    const response = await axios.get(API_URL + groupId, config);\n    return response.data.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Create new group\nexport const createGroup = createAsyncThunk('groups/create', async (groupData, thunkAPI) => {\n  try {\n    const token = getToken(thunkAPI);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.post(API_URL, groupData, config);\n    return response.data.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n\n// Add member to group\nexport const addMemberToGroup = createAsyncThunk('groups/addMember', async ({\n  groupId,\n  userId\n}, thunkAPI) => {\n  try {\n    const token = getToken(thunkAPI);\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const response = await axios.post(`${API_URL}${groupId}/members`, {\n      userId\n    }, config);\n    return response.data.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const groupSlice = createSlice({\n  name: 'group',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.singleGroup = null;\n      state.isError = false;\n      state.isSuccess = false;\n      state.isLoading = false;\n      state.message = '';\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(getGroups.pending, state => {\n      state.isLoading = true;\n    }).addCase(getGroups.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.groups = action.payload;\n    }).addCase(getGroups.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(createGroup.pending, state => {\n      state.isLoading = true;\n    }).addCase(createGroup.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.groups.push(action.payload);\n    }).addCase(createGroup.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getGroupById.pending, state => {\n      state.isLoading = true;\n    }).addCase(getGroupById.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.singleGroup = action.payload;\n    }).addCase(getGroupById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(addMemberToGroup.pending, state => {\n      state.isLoading = true;\n    }).addCase(addMemberToGroup.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.singleGroup = action.payload; // Update the single group details with the new member list\n    }).addCase(addMemberToGroup.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = groupSlice.actions;\nexport default groupSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","initialState","groups","singleGroup","isError","isSuccess","isLoading","message","getToken","thunkAPI","getState","auth","token","getGroups","_","config","headers","Authorization","response","get","data","error","_error$response","_error$response$data","toString","rejectWithValue","getGroupById","groupId","_error$response2","_error$response2$data","createGroup","groupData","post","_error$response3","_error$response3$data","addMemberToGroup","userId","_error$response4","_error$response4$data","groupSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","push","actions","reducer"],"sources":["C:/Users/srisa/OneDrive/Desktop/fullstack/expense-splitter-frontend/src/features/groups/groupSlice.js"],"sourcesContent":["// src/features/groups/groupSlice.js\r\n\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/v1/groups/';\r\n\r\nconst initialState = {\r\n  groups: [],\r\n  singleGroup: null, // Add state for a single group's details\r\n  isError: false,\r\n  isSuccess: false,\r\n  isLoading: false,\r\n  message: '',\r\n};\r\n\r\n// Helper function to get the token\r\nconst getToken = (thunkAPI) => thunkAPI.getState().auth.token;\r\n\r\n// Get all user groups\r\nexport const getGroups = createAsyncThunk('groups/getAll', async (_, thunkAPI) => {\r\n  try {\r\n    const token = getToken(thunkAPI);\r\n    const config = { headers: { Authorization: `Bearer ${token}` } };\r\n    const response = await axios.get(API_URL, config);\r\n    return response.data.data;\r\n  } catch (error) {\r\n    const message = (error.response?.data?.error) || error.message || error.toString();\r\n    return thunkAPI.rejectWithValue(message);\r\n  }\r\n});\r\n\r\n// Get a single group by ID\r\nexport const getGroupById = createAsyncThunk('groups/getById', async (groupId, thunkAPI) => {\r\n    try {\r\n      const token = getToken(thunkAPI);\r\n      const config = { headers: { Authorization: `Bearer ${token}` } };\r\n      // Note: We don't have a backend route for this yet, let's assume one exists at /api/v1/groups/:id\r\n      // We will need to add this to the backend. For now, we can filter from the existing groups list as a fallback.\r\n      const response = await axios.get(API_URL + groupId, config);\r\n      return response.data.data;\r\n    } catch (error) {\r\n      const message = (error.response?.data?.error) || error.message || error.toString();\r\n      return thunkAPI.rejectWithValue(message);\r\n    }\r\n  });\r\n\r\n// Create new group\r\nexport const createGroup = createAsyncThunk('groups/create', async (groupData, thunkAPI) => {\r\n    try {\r\n        const token = getToken(thunkAPI);\r\n        const config = { headers: { Authorization: `Bearer ${token}` } };\r\n        const response = await axios.post(API_URL, groupData, config);\r\n        return response.data.data;\r\n    } catch (error) {\r\n        const message = (error.response?.data?.error) || error.message || error.toString();\r\n        return thunkAPI.rejectWithValue(message);\r\n    }\r\n});\r\n\r\n// Add member to group\r\nexport const addMemberToGroup = createAsyncThunk('groups/addMember', async ({ groupId, userId }, thunkAPI) => {\r\n    try {\r\n        const token = getToken(thunkAPI);\r\n        const config = { headers: { Authorization: `Bearer ${token}` } };\r\n        const response = await axios.post(`${API_URL}${groupId}/members`, { userId }, config);\r\n        return response.data.data;\r\n    } catch (error) {\r\n        const message = (error.response?.data?.error) || error.message || error.toString();\r\n        return thunkAPI.rejectWithValue(message);\r\n    }\r\n});\r\n\r\nexport const groupSlice = createSlice({\r\n  name: 'group',\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => {\r\n        state.singleGroup = null;\r\n        state.isError = false;\r\n        state.isSuccess = false;\r\n        state.isLoading = false;\r\n        state.message = '';\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getGroups.pending, (state) => { state.isLoading = true; })\r\n      .addCase(getGroups.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.groups = action.payload;\r\n      })\r\n      .addCase(getGroups.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(createGroup.pending, (state) => { state.isLoading = true; })\r\n      .addCase(createGroup.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.groups.push(action.payload);\r\n      })\r\n      .addCase(createGroup.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(getGroupById.pending, (state) => { state.isLoading = true; })\r\n      .addCase(getGroupById.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.singleGroup = action.payload;\r\n      })\r\n      .addCase(getGroupById.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      })\r\n      .addCase(addMemberToGroup.pending, (state) => { state.isLoading = true; })\r\n      .addCase(addMemberToGroup.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isSuccess = true;\r\n        state.singleGroup = action.payload; // Update the single group details with the new member list\r\n      })\r\n      .addCase(addMemberToGroup.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.isError = true;\r\n        state.message = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { reset } = groupSlice.actions;\r\nexport default groupSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}